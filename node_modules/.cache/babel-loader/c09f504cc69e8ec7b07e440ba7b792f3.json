{"ast":null,"code":"const APIURL = '/api/todos/';\nexport async function getTodos() {\n  return fetch(APIURL).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status <= 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please Try Again Later'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      name: val\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status <= 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please Try Again Later'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function removeTodo(id) {\n  const deleteUrl = APIURL + id;\n  return fetch(deleteUrl, {\n    method: 'delete'\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status <= 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please Try Again Later'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function updateTodo(todo) {\n  const updateUrl = APIURL + todo._id;\n  return fetch(updateUrl, {\n    method: 'put',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      completed: !todo.completed\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status <= 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Please Try Again Later'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}","map":{"version":3,"sources":["/Users/justineayroor/Desktop/TodoReactApp/todos-frontend/src/api.js"],"names":["APIURL","getTodos","fetch","then","resp","ok","status","json","data","err","errorMessage","message","createTodo","val","method","headers","Headers","body","JSON","stringify","name","removeTodo","id","deleteUrl","updateTodo","todo","updateUrl","_id","completed"],"mappings":"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","sourcesContent":["const APIURL = '/api/todos/';\n\n\nexport async function getTodos(){\n    return fetch(APIURL)\n        .then(resp => {\n            if(!resp.ok){\n                if(resp.status >= 400 && resp.status <= 500 ){\n                    return resp.json().then(data => {\n                        let err = {errorMessage : data.message};\n                        throw err;\n                    })\n                }else{\n                    let err = {errorMessage : 'Please Try Again Later'};\n                    throw err;\n                }\n            }\n            return resp.json();\n        })\n}\n\nexport async function createTodo(val){\n    return fetch(APIURL, {\n        method: 'post',\n        headers: new Headers({'Content-Type': 'application/json',\n    }),\n    body: JSON.stringify({name: val})\n    })\n    .then(resp => {\n        if(!resp.ok){\n            if(resp.status >= 400 && resp.status <= 500 ){\n                return resp.json().then(data => {\n                    let err = {errorMessage : data.message};\n                    throw err;\n                })\n            }else{\n                let err = {errorMessage : 'Please Try Again Later'};\n                throw err;\n            }\n        }\n        return resp.json();\n    })\n}\n\nexport async function removeTodo(id){\n    const deleteUrl = APIURL + id;\n    return fetch(deleteUrl, {\n        method: 'delete',\n    })\n    .then(resp => {\n        if(!resp.ok){\n            if(resp.status >= 400 && resp.status <= 500 ){\n                return resp.json().then(data => {\n                    let err = {errorMessage : data.message};\n                    throw err;\n                })\n            }else{\n                let err = {errorMessage : 'Please Try Again Later'};\n                throw err;\n            }\n        }\n        return resp.json();\n    })\n    \n}\n\nexport async function updateTodo(todo){\n    const updateUrl = APIURL + todo._id;\n    return fetch(updateUrl, {\n        method: 'put',\n        headers: new Headers({'Content-Type': 'application/json',\n    }),\n    body: JSON.stringify({completed: !todo.completed})\n    })\n    .then(resp => {\n        if(!resp.ok){\n            if(resp.status >= 400 && resp.status <= 500 ){\n                return resp.json().then(data => {\n                    let err = {errorMessage : data.message};\n                    throw err;\n                })\n            }else{\n                let err = {errorMessage : 'Please Try Again Later'};\n                throw err;\n            }\n        }\n        return resp.json();\n    })\n}"]},"metadata":{},"sourceType":"module"}